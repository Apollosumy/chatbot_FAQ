import time
import hmac
import hashlib
import json as pyjson
from urllib.parse import urlencode, urlparse

from pathlib import Path
import asyncio
import os
import requests
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ß–∏—Ç–∞—î–º–æ –æ–¥–∏–Ω —Å–ø—ñ–ª—å–Ω–∏–π .env –∑ –∫–æ—Ä–µ–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
load_dotenv(Path(__file__).resolve().parents[1] / ".env")

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
DJANGO_API_URL = os.getenv("DJANGO_API_URL", "http://localhost:8000/api")
parsed = urlparse(DJANGO_API_URL)
API_ORIGIN = f"{parsed.scheme}://{parsed.netloc}"      # –Ω–∞–ø—Ä., https://api.pabot.online
API_PREFIX = parsed.path.rstrip("/")                    # –Ω–∞–ø—Ä., /api
DJANGO_API_KEY = os.getenv("DJANGO_API_KEY", "")
DJANGO_HMAC_SECRET = os.getenv("DJANGO_HMAC_SECRET", "")
DEFAULT_TIMEOUT = 10

bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
dp = Dispatcher(storage=MemoryStorage())

# --- –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∑–∞–ø–∏—Ç—É (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ¬´–º—ñ–Ω—ñ–º—É–º 3 —Å–ª–æ–≤–∞¬ª) ---
MIN_WORDS = 3

def _count_words_ua(text: str) -> int:
    """
    –†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å ¬´—Å–ª—ñ–≤¬ª —É —Ç–µ–∫—Å—Ç—ñ, —ñ–≥–Ω–æ—Ä—É—é—á–∏ —Ä–æ–∑–¥—ñ–ª–æ–≤—ñ –∑–Ω–∞–∫–∏.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä./–ª–∞—Ç–∏–Ω–∏—Ü—é, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏.
    """
    import re
    cleaned = re.sub(r"[^\w‚Äô'“ë—î—ñ—ó–∞-—è–ê-–Øa-zA-Z0-9]+", " ", text, flags=re.U).strip()
    return len([w for w in cleaned.split() if w])

# ---------- HMAC-–ø—ñ–¥–ø–∏—Å ----------
def _make_signature(method: str, full_path: str, body_bytes: bytes) -> tuple[str, str, str]:
    """
    –ü—ñ–¥–ø–∏—Å—É—î–º–æ —Ä—è–¥–æ–∫: "<ts>\n<METHOD>\n<full_path>\n<sha256(body)>".
    –ü–æ–≤–µ—Ä—Ç–∞—î (timestamp, "v1=<sig>", content_sha256_hex).
    """
    ts = str(int(time.time()))
    content_hash = hashlib.sha256(body_bytes or b"").hexdigest()
    to_sign = "\n".join([ts, method.upper(), full_path, content_hash]).encode("utf-8")
    sig = hmac.new(DJANGO_HMAC_SECRET.encode("utf-8"), to_sign, hashlib.sha256).hexdigest()
    return ts, f"v1={sig}", content_hash

def _base_headers(user_id: int | None, want_json: bool) -> dict:
    h = {
        "X-API-Key": DJANGO_API_KEY,
        "Accept": "application/json",
    }
    if want_json:
        h["Content-Type"] = "application/json"
    if user_id is not None:
        h["X-Telegram-Id"] = str(user_id)
    return h

def _full_path_for_sig(path: str, params: dict | None) -> str:
    """
    –ö–∞–Ω–æ–Ω—ñ—á–Ω–∏–π —à–ª—è—Ö –¥–ª—è –ü–Ü–î–ü–ò–°–£:
    <API_PREFIX><path>[?<sorted query>]
    –ø—Ä–∏–∫–ª–∞–¥: "/api/search/?q=abc&page=1"
    """
    if not path.startswith("/"):
        path = "/" + path
    base = f"{API_PREFIX}{path}"
    if params:
        # –≤–∞–∂–ª–∏–≤–æ: –≤–ø–æ—Ä—è–¥–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å—Ç–∞–±—ñ–ª—ñ–∑—É—î –ø—ñ–¥–ø–∏—Å
        base = f"{base}?{urlencode(params, doseq=True)}"
    return base

# --- HTTP-—Ö–µ–ª–ø–µ—Ä–∏ (–ø—ñ–¥–ø–∏—Å–∞–Ω—ñ) ---
def api_get(
    path: str,
    params: dict | None = None,
    *,
    user_id: int | None = None,
    timeout: int = DEFAULT_TIMEOUT,
):
    full_path = _full_path_for_sig(path, params)         # —Ç–µ, —â–æ –ø—ñ–¥–ø–∏—Å—É—î–º–æ
    url = f"{API_ORIGIN}{full_path}"                     # ORIGIN + full_path (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ /api)
    ts, signature, content_hash = _make_signature("GET", full_path, b"")
    headers = _base_headers(user_id, want_json=False) | {
        "X-Timestamp": ts,
        "X-Signature": signature,
        "X-Content-SHA256": content_hash,
    }
    return requests.get(url, headers=headers, params=None, timeout=timeout)

def api_post(
    path: str,
    json: dict | None = None,
    *,
    user_id: int | None = None,
    timeout: int = DEFAULT_TIMEOUT,
):
    # —Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∞–º—ñ, —â–æ–± –±–∞–π—Ç–∏ –ø—ñ–¥–ø–∏—Å—É == –±–∞–π—Ç–∞–º —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
    raw_body = pyjson.dumps(json or {}, ensure_ascii=False, separators=(",", ":"), sort_keys=True).encode("utf-8")
    full_path = _full_path_for_sig(path, None)
    url = f"{API_ORIGIN}{full_path}"                     # ORIGIN + full_path
    ts, signature, content_hash = _make_signature("POST", full_path, raw_body)
    headers = _base_headers(user_id, want_json=True) | {
        "X-Timestamp": ts,
        "X-Signature": signature,
        "X-Content-SHA256": content_hash,
    }
    return requests.post(url, data=raw_body, headers=headers, timeout=timeout)

# ---------- –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ----------
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"),
            KeyboardButton(text="üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é"),
            KeyboardButton(text="üîé –ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é"),
        ],
        [
            KeyboardButton(text="‚ùóÔ∏è–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"),
            KeyboardButton(text="‚ÑπÔ∏è –©–æ –≤–º—ñ—î –±–æ—Ç"),
        ],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

# ---------- –°—Ç–∞–Ω FSM ----------
class SearchMode(StatesGroup):
    idle = State()
    search_instruction = State()
    search_answer = State()
    feedback = State()

# ---------- /start ----------
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(SearchMode.idle)
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=main_keyboard)

# ---------- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ reply-–∫–Ω–æ–ø–æ–∫ ----------
@dp.message(F.text == "üîç –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(SearchMode.search_answer)

    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—ñ–Ω–≥ –±–µ–∫—É –∑ HMAC-–ø—ñ–¥–ø–∏—Å–æ–º
    r = api_get("/ping/", user_id=message.from_user.id)
    print("PING RESPONSE:", r.status_code, r.text)

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")

@dp.message(F.text == "‚ùóÔ∏è–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É")
async def start_feedback(message: Message, state: FSMContext):
    await state.set_state(SearchMode.feedback)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É, —è–∫—É –≤–∏ –≤–∏—è–≤–∏–ª–∏:")

@dp.message(F.text == "‚ÑπÔ∏è –©–æ –≤–º—ñ—î –±–æ—Ç")
async def show_help(message: Message, state: FSMContext):
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫.\n\n"
        "üü¢ ¬´üîç –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è¬ª ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "üü¢ ¬´üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é¬ª ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "üü¢ ¬´üîé –ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é¬ª ‚Äî –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º\n"
        "üü¢ ¬´‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É¬ª ‚Äî –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫"
    )

@dp.message(F.text == "üîé –ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é")
async def start_instruction_search(message: Message, state: FSMContext):
    await state.set_state(SearchMode.search_instruction)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")

# ---------- –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É 'feedback' ----------
@dp.message(SearchMode.feedback)
async def handle_feedback(message: Message, state: FSMContext):
    feedback_text = (message.text or "").strip()
    if not feedback_text:
        await message.reply("‚ùå –í—ñ–¥–≥—É–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    try:
        r = api_post(
            "/feedback/",
            json={"user_id": str(message.from_user.id), "message": feedback_text},
            user_id=message.from_user.id,
        )
        if r.status_code == 201:
            await message.reply("‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        elif r.status_code in (401, 403):
            await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É: {r.status_code}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    await state.set_state(SearchMode.idle)

# ---------- –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó (—á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π) ----------
@dp.message(F.text == "üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é")
async def get_instruction_entry(message: Message, state: FSMContext):
    await state.set_state(SearchMode.idle)
    try:
        r = api_get("/categories/", user_id=message.from_user.id)
        if r.status_code in (401, 403):
            await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∞—à Telegram ID –¥–æ–¥–∞–Ω–æ –≤ –±—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫.")
            return
        r.raise_for_status()
        categories = r.json()

        if not categories:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.")
            return

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=c["name"], callback_data=f"cat_{c['id']}")] for c in categories]
        )
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {str(e)}")

@dp.callback_query(F.data.startswith("cat_"))
async def category_selected(callback: CallbackQuery):
    category_id = callback.data.split("_", 1)[1]
    try:
        r = api_get(f"/subcategories/{category_id}/", user_id=callback.from_user.id)
        if r.status_code in (401, 403):
            await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            await callback.answer()
            return
        r.raise_for_status()
        subs = r.json()

        if not subs:
            await callback.message.answer("–ù–µ–º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
            await callback.answer()
            return

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=s["name"], callback_data=f"sub_{s['id']}")] for s in subs]
        )
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {str(e)}")
    await callback.answer()

@dp.callback_query(F.data.startswith("sub_"))
async def subcategory_selected(callback: CallbackQuery):
    sub_id = callback.data.split("_", 1)[1]
    try:
        r = api_get(f"/instructions/{sub_id}/", user_id=callback.from_user.id)
        if r.status_code in (401, 403):
            await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            await callback.answer()
            return
        r.raise_for_status()
        instrs = r.json()

        if not instrs:
            await callback.message.answer("–ù–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —É —Ü—ñ–π –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
            await callback.answer()
            return

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=i["title"], callback_data=f"instr_{i['id']}")] for i in instrs]
        )
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é:", reply_markup=kb)
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {str(e)}")
    await callback.answer()

@dp.callback_query(F.data.startswith("instr_"))
async def instruction_selected(callback: CallbackQuery):
    instr_id = callback.data.split("_", 1)[1]
    try:
        r = api_get(f"/instruction/{instr_id}/", user_id=callback.from_user.id)
        if r.status_code in (401, 403):
            await callback.message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            await callback.answer()
            return

        if r.status_code == 200:
            data = r.json()
            text = f"<b>{data['title']}</b>\n\n{data['content']}"
            if data.get("image_url"):
                await callback.message.answer_photo(photo=data["image_url"], caption=text, parse_mode="HTML")
            else:
                await callback.message.answer(text, parse_mode="HTML")
        else:
            await callback.message.answer("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {str(e)}")
    await callback.answer()

# ---------- –ü–æ—à—É–∫ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º ----------
@dp.message(SearchMode.search_instruction)
async def process_instruction_query(message: Message, state: FSMContext):
    query = (message.text or "").strip()
    if not query:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.")
        return

    try:
        r = api_get("/search_instructions/", params={"query": query}, user_id=message.from_user.id)
        if r.status_code in (401, 403):
            await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        if r.status_code == 200:
            instrs = r.json()
            if instrs:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text=i["title"], callback_data=f"instr_{i['id']}")] for i in instrs]
                )
                await message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é:", reply_markup=kb)
            else:
                await message.answer("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {r.status_code}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# ---------- –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ----------
@dp.message(SearchMode.search_answer)
async def handle_question(message: Message, state: FSMContext):
    question = (message.text or "").strip()
    if not question:
        await message.reply("–í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    # –ù–æ–≤–µ: –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª—ñ–≤
    if _count_words_ua(question) < MIN_WORDS:
        await message.reply("–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ –π–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ (–º—ñ–Ω—ñ–º—É–º 3 —Å–ª–æ–≤–∞).")
        return

    try:
        r = api_post("/search/", json={"question": question}, user_id=message.from_user.id)

        if r.status_code in (401, 403):
            await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif r.status_code == 200:
            data = r.json()
            await message.reply(data.get("answer", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."))
        elif r.status_code == 404:
            data = r.json()
            await message.reply(data.get("answer", "–í–∏–±–∞—á—Ç–µ, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."))
        elif r.status_code == 429:
            try:
                data = r.json()
                await message.reply(f"‚è≥ {data.get('detail', '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')}")
            except Exception:
                await message.reply("‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {r.status_code}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")

    await state.set_state(SearchMode.idle)

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ----------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
